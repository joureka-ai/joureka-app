version: "3.3"
services:
  proxy:
    image: traefik:v2.2
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8888:80"
      - "8090:8080"
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label for this stack
      # from the env var TRAEFIK_TAG
      - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `${TRAEFIK_TAG?Variable not set}`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
      # Enable the Dashboard and API in insecure mode for local development
      - --api.insecure=true
    labels:
      - traefik.enable=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-traefik-public-http.rule=Host(`${DOMAIN?Variable not set}`)
      - traefik.http.services.${STACK_NAME?Variable not set}-traefik-public.loadbalancer.server.port=80

  db:
    image: postgres:12
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"

  # pgadmin:
  #   image: dpage/pgadmin4
  #   ports:
  #     - "5050:5050"
  #   networks:
  #     - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
  #     - default
  #   depends_on:
  #     - db
  #   env_file:
  #     - .env
  
  schemaspy:
    image: schemaspy/schemaspy:latest
    volumes:
      - ./backend/schemaspy/output:/output
      - ./backend/schemaspy/config:/config
    command:
      ["-configFile", "/config/schemaspy.properties", "-imageformat", "svg"]

  backend:
    image: "${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}"
    ports:
      - "8889:80"
    depends_on:
      - db
    env_file:
      - .env
    volumes:
      - file_store:/file_store
      - ./backend/app:/app
      - ./backend/.aws:/aws_cfg
    environment:
      - SERVER_NAME=${DOMAIN?Variable not set}
      - SERVER_HOST=https://${DOMAIN?Variable not set}
      # Allow explicit env var override for tests
      - SMTP_HOST=${SMTP_HOST}
      - FILE_STORE=/file_store
      - AWS_CONFIG_FILE=/aws_cfg/config
      - AWS_SHARED_CREDENTIALS_FILE=/aws_cfg/credentials
      - JUPYTER=jupyter lab --ip=0.0.0.0 --allow-root --NotebookApp.custom_display_url=http://127.0.0.1:8888
    build:
      context: ./backend
      dockerfile: backend.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
        INSTALL_JUPYTER: ${INSTALL_JUPYTER-true}
    command: /start-reload.sh
    labels:
      - traefik.enable=true
      - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
      - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=80
 
  # frontend:
  #   image: '${DOCKER_IMAGE_FRONTEND?Variable not set}:${TAG-latest}'
  #   build:
  #     context: ./frontend
  #     args:
  #       FRONTEND_ENV: ${FRONTEND_ENV-production}
  #   labels:
  #     - traefik.enable=true
  #     - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
  #     - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.rule=PathPrefix(`/`)
  #     - traefik.http.services.${STACK_NAME?Variable not set}-frontend.loadbalancer.server.port=80

  minio:
    image: minio/minio:RELEASE.2021-02-07T01-31-02Z
    ports:
     - "9000:9000"
    volumes:
      - minio-data:/data
    env_file:
      - .env
    command: server /data
    environment:
      MINIO_ROOT_USER: ${FIRST_SUPERUSER}
      MINIO_ROOT_PASSWORD: ${FIRST_SUPERUSER_PASSWORD}
    labels:
      - traefik.enable=true
      - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
      - traefik.http.routers.${STACK_NAME?Variable not set}-minio-http.rule=PathPrefix(`/minio`) || PathPrefix(`/file-store`)
      - traefik.http.services.${STACK_NAME?Variable not set}-minio.loadbalancer.server.port=9000

volumes:
  app-db-data:
  file_store:
  minio-data:

networks:
  j-traefik-public:
    # Allow setting it to false for testing
    external: false
